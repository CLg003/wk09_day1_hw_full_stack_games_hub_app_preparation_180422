Questions
1. What is responsible for defining the routes of the games resource?
The createRouter() function in the create_router.js file (server > helpers).

2. What do you notice about the folder structure? What's the client responsible for? What's the server responsible for?
The client is reponsible for the app's onscreen UI, interactions with the user (form) and interactions with the server.
The server is responsible for dealing with HTTP requests and database interactions. 

3. What are the the responsibilities of server.js?
server.js is responsible for setting up a connection to the database and the processes that listen for requests to that database.


4. What are the responsibilities of the gamesRouter?
The gamesRouter ensures that all http requests are directed to the correct database.


5. What process does the the client (front-end) use to communicate with the server?
Callback functions within GamesContainer.js are used to communicate with the server via fetch request functions in GamesService.js that are listened for by the server's createRouter() function in creater_router.js.

6. What optional second argument does the fetch method take? And what is it used for in this application?
The optional second argument that the fetch method can take is an object of request options - it is used in this application to define the request method, that the "body" data being sent with the request should be converted to a JSON string, and that the content being sent with the request is of JSON format ("headers").

7. Which of the games API routes does the front-end application consume (i.e. make requests to)?
GET request to router.get('/')


8. What are we using the MongoDB Driver for?
It allows our app to connect to MongoDB and work with our data.


Extension
Why do we need to use ObjectId from the MongoDB driver?
To convert the id string that we pass as an id into an object id that can be read by MongoDB.